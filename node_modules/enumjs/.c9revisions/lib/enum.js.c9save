{"ts":1352644905473,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function Enum(next, count, clone) {\n    this.next = next;\n    this.count = count;\n    this.clone = clone;\n}\nmodule.exports = Enum;\n\n/**\n *  Enum#iter(function)\n *\n *  e.iter(f) calls the function f with each element of e in turn. This\n *  consumes the enumeration.\n **/\nEnum.prototype.iter = function(fn) {\n    var curr;\n    while ((curr = this.next()) !== null)\n        fn(curr);\n};\n\n/**\n *  Enum#find(function) -> Element\n *\n *  e.find(f) returns the first element x of e such that f(x) returns true,\n *  consuming the enumeration up to and including the found element, or,\n *  returns null if no such element exists in the enumeration, consuming the\n *  whole enumeration in the search. Since find consumes a prefix of the\n *  enumeration, it can be used several times on the same enumeration to find\n *  the next element.\n **/\nEnum.prototype.find = function(fn) {\n    var curr, found;\n    while ((curr = this.next()) !== null) {\n        if (fn(curr) === true) {\n            found = curr;\n            break;\n        }\n    }\n\n    return found || null;\n};\n\nEnum.prototype.isEmpty = function() {\n    if (this.fast)\n        return this.count() === 0;\n    else\n        return this.peek() === null;\n};\n\n// peek e returns None if e is empty or Some x where x is the next element of e.\n// The element is not removed from the enumeration.\nEnum.prototype.peek = function() {\n    var next = this.get();\n    if (next !== null)\n        this.push(next);\n\n    return next;\n};\n\nEnum.prototype.get = function() {\n    return this.next();\n};\n\nEnum.prototype.junk = function() {\n    this.next();\n};\n\nEnum.prototype.push = function(e) {\n    var make = function(self) {\n        var fNext = self.next;\n        var fCount = self.count;\n        var fClone = self.clone;\n        var nextCalled = false;\n\n        self.next = function() {\n            nextCalled = true;\n            self.next = fNext;\n            self.count = fCount;\n            self.clone = fClone;\n\n            return e;\n        };\n\n        self.count = function() {\n            var n = fCount();\n            return nextCalled === true ? n : n + 1;\n        };\n\n        self.clone = function() {\n            var c = fClone();\n            if (nextCalled === false)\n                make(c);\n\n            return c;\n        };\n    };\n\n    make(this);\n};\n\nEnum.make = function(next, count, clone) {\n    var e = new Enum();\n    e.next = next;\n    e.count = count;\n    e.clone = clone;\n\n    return e;\n};\n\nEnum.empty = function() {\n    var e = new Enum();\n    e.next = function() { return null; };\n    e.count = function() { return 0; };\n    e.clone = function() { return e.empty(); };\n    e.fast = true;\n\n    return e;\n};\n\nEnum.init = function(n, fn) {\n    var e = new Enum();\n\n    var count = n;\n    e.count = function() {\n        return count;\n    };\n\n    e.next = function() {\n        if (count === 0) {\n            throw \"No more elements\";\n        }\n        else {\n            count -= 1;\n            return fn(n - 1 - count);\n        }\n    };\n\n    e.clone = function() {\n        return e.init(count, fn);\n    };\n\n    e.fast = true;\n};\n\nEnum.prototype.map = function(fn) {\n    var self = this;\n    return (function() {\n        this.next = function() {\n            return fn(self.next());\n        };\n\n        this.count = self.count;\n\n        this.clone = function() {\n            return self.clone().map(fn);\n        };\n\n        this.fast = self.fast;\n\n        return this;\n    }).call(new Enum());\n};\n\nEnum.prototype.filter = function(fn) {\n\n};\n\nEnum.fromArray = function(array) {\n    return (function() {\n        var counter = 0;\n        this.next = function() {\n            var value = null;\n            if (typeof array[counter] !== \"undefined\") {\n                value = array[counter];\n                counter += 1;\n            }\n\n            return value;\n        };\n\n        this.count = function() {\n            return array.length - counter; // todo: not good probably\n        };\n\n        this.clone = function() {\n            var e = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n            e._setCounter(counter);\n            return e;\n        };\n\n        this._setCounter = function(n) {\n            counter = n;\n        };\n\n        return this;\n    }).call(new Enum());\n};\n\nEnum.fromString = function(string) {\n    return (function() {\n        var counter = 0;\n        this.next = function() {\n            var value = null;\n            if (typeof string[counter] !== \"undefined\") {\n                value = string[counter];\n                counter += 1;\n            }\n\n            return value;\n        };\n\n        this.count = function() {\n            return array.length - counter; // todo: not good probably\n        };\n\n        this.clone = function() {\n            var e = Enum.fromString(string);\n            e._setCounter(counter);\n            return e;\n        };\n\n        this._setCounter = function(n) {\n            counter = n;\n        };\n\n        return this;\n    }).call(new Enum());\n};\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4946}]],"length":4946}
{"contributors":[],"silentsave":false,"ts":1352672025315,"patch":[[{"diffs":[[0,"lone;\n}\n"],[1,"\n"],[0,"module.e"]],"start1":100,"start2":100,"length1":16,"length2":17}]],"length":4947,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354098249977,"patch":[[{"diffs":[[0,".next = next"],[1,".bind(this)"],[0,";\n    this.c"]],"start1":44,"start2":44,"length1":24,"length2":35},{"diffs":[[0,"ount = count"],[1,".bind(this)"],[0,";\n    this.c"]],"start1":79,"start2":79,"length1":24,"length2":35},{"diffs":[[0,"lone"],[1,".bind(this);\n\n    this.data = {}"],[0,";\n}"],[-1,"\n"],[0,"\nmod"]],"start1":122,"start2":122,"length1":12,"length2":43},{"diffs":[[0,"         return "],[-1,"array"],[1,"string"],[0,".length - counte"]],"start1":4643,"start2":4643,"length1":37,"length2":38},{"diffs":[[0,"));\n};\n\n"],[-1,"\n"]],"start1":4992,"start2":4992,"length1":9,"length2":8}]],"length":5000,"saved":false}
