{"ts":1354096756261,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var assert = require('assert');\nvar libpath = process.env['VFS_FTP_COV'] ? '../lib-cov' : '../lib';\nvar Enum = require(libpath + \"/enum.js\");\n\ndescribe('Enum', function() {\n    describe(\"when creating an Enum\", function() {\n        var topic;\n\n        beforeEach(function() {\n            topic = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n        });\n\n        it(\"should properly tell if an Enum is empty or not\", function() {\n            var e = Enum.fromArray([]);\n            assert.ok(e.isEmpty())\n            e = Enum.fromArray([1]);\n            assert.ok(e.isEmpty() === false)\n        })\n\n        it(\"should get all the individual items in the array\", function() {\n            assert.equal(topic.get(), 1);\n            assert.equal(topic.get(), 2);\n            assert.equal(topic.get(), 3);\n            assert.equal(topic.get(), 4);\n            assert.equal(topic.get(), 5);\n            assert.equal(topic.get(), 6);\n        })\n\n        it(\"we go through all the items\", function() {\n            assert.equal(topic.count(), 6);\n\n            var _counter = 0;\n            topic.iter(function(item) {\n                _counter++;\n            });\n\n            assert.equal(_counter, 6);\n            assert.equal(topic.count(), 0);\n        })\n\n        it(\"cloning works nicely\", function() {\n            topic.get();\n\n            var topic2 = topic.clone();\n            assert.equal(topic2.count(), 5);\n            topic.get();\n            assert.equal(topic.count(), 4);\n\n            var _counter = 0;\n            topic2.iter(function(item) {\n                _counter++;\n            });\n\n            assert.equal(_counter, 5);\n            assert.equal(topic2.count(), 0);\n        })\n\n        it(\"adds items properly\", function() {\n            topic.push(23);\n\n            assert.equal(topic.count(), 7);\n            assert.equal(topic.next(), 23);\n        })\n\n    })\n\n    describe(\"when finding an element\", function() {\n        var topic;\n\n        beforeEach(function() {\n            var t = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n            var el = t.find(function(e) {\n                return e === 4;\n            });\n\n            topic = [el, t];\n        });\n\n        it(\"test that we actually find the element\", function() {\n            assert.equal(topic[0], 4);\n        });\n    }),\n\n    describe(\"when not finding an element\", function() {\n        var topic;\n\n        beforeEach(function() {\n            var t = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n            var el = t.find(function(e) {\n                return e === 10;\n            });\n\n            topic = [el, t];\n        });\n\n        it(\"test that we actually can't find the element\", function() {\n            assert.strictEqual(topic[0], null);\n        });\n\n\n        it(\"test that we can't find another element\", function() {\n            var t = topic[1];\n\n            assert.equal(null, t.find(function(e) {\n                return e === 3;\n            }));\n        });\n    });\n\n    describe(\"when peeking for the next element\", function() {\n        var topic;\n        beforeEach(function() {\n            topic = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n        });\n\n        it(\"test that we get a null when peeking on empty Enum\", function() {\n            var p = Enum.fromArray([]).peek();\n            assert.strictEqual(p, null);\n        });\n\n        it(\"test that peek gives us the proper number\", function() {\n            var p = topic.peek();\n            p = topic.peek();\n            p = topic.peek();\n            p = topic.peek();\n            assert.equal(p, 1);\n        });\n    });\n\n    describe(\"when getting the next element\", function() {\n        var topic;\n        beforeEach(function() {\n            topic = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n        });\n\n        it(\"test that we get a null when getting on empty Enum\", function() {\n            var p = Enum.fromArray([]).get();\n            assert.strictEqual(p, null);\n        });\n\n        it(\"test that get gives us the proper number\", function() {\n            var p = topic.get();\n            assert.equal(p, 1);\n            p = topic.get();\n            assert.equal(p, 2);\n            p = topic.get();\n            assert.equal(p, 3);\n            p = topic.get();\n            assert.equal(p, 4);\n        });\n    });\n\n    describe(\"when mapping functions on Enums\", function() {\n        var topic;\n        beforeEach(function() {\n            topic = Enum.fromArray([1, 2, 3, 4, 5, 6]);\n        });\n\n        it(\"test that mapping a function gives coherent results\", function() {\n            var map = topic.map(function(val) {\n                return val + 10;\n            });\n            assert.equal(map.get(), 11);\n            assert.equal(map.get(), 12);\n\n            assert.equal(topic.get(), 3);\n\n            var mapClone = map.clone();\n            assert.equal(mapClone.get(), 14);\n            assert.equal(map.get(), 14);\n        });\n    });\n});\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4875}]],"length":4875}
