{"ts":1354096761692,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"enum.js\n=======\n\nEnum.js is a simple library that provides functional enumeration over an abstract collection of elements. The user can define its own enumerations or use the basic ones already provided.\n\nEnum.js comes with support with common \"sequenceable\" items such as arrays or\nlists, but it shines when creating custom enumerations. For example, an\nenumeration for the Fibonacci sequence would look like a bit like this:\n\n    var fibo = new Enum(\n        function next() {\n            var data = this.data;\n            if (!data)\n                data = this.data = { counter: 0, res: [] };\n\n            var n = data.counter < 2 ? data.counter : data.res[0] + data.res[1];\n            res.push(n);\n            if (res.length > 2)\n                res.shift();\n\n            data.counter++;\n            return n;\n        },\n\n        function count() { return Infinity; },\n\n        function clone() {\n            var clone = fibo();\n            clone._counter = this._counter;\n            clone._results = [this._results[0], this._results[1]];\n            return clone;\n        }\n    );\n\n    for (var i = 0; i < 301; i++)\n        console.log(fibo.get().valueOf());\n\nOne of the advantages of Enum.js is that it can operate over infinite lists of items, as long as the `next()` operation is properly defined. For example, we can have an enumeration on the Fibonacci sequence quite easily:\n\n\n\nBut read on, there's a bit more :)\n\nMost operations in the enumeration consume the current item (for example, finding an item in a list will consume all the items up to that item).\nEnumerations are entirely functional and do not modify the original object.\n\nEnum.js is inspired by OCaml's `Enum` module.\n\nExample of usage\n-------------\n\n    var seq1 = Enum.fromString(\"It's just a string\");\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1783}]],"length":1783}
{"contributors":[],"silentsave":false,"ts":1354099977640,"patch":[[{"diffs":[[0," this:\n\n"],[-1,"    "],[1,"```javascript\n\n"],[0,"var fibo"]],"start1":420,"start2":420,"length1":20,"length2":31},{"diffs":[[0,"w Enum(\n    "],[-1,"    "],[0,"function nex"]],"start1":456,"start2":456,"length1":28,"length2":24},{"diffs":[[0,") {\n        "],[-1,"    "],[0,"var data = t"]],"start1":482,"start2":482,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"    if (!data)\n        "],[1,"!data.count && (data.count = 0);\n"],[0,"        "],[1,"!"],[0,"data"],[-1," = this.data = { counter: 0, res: [] }"],[1,".cache && (data.cache = [])"],[0,";\n\n"],[-1,"    "],[0,"    "]],"start1":520,"start2":520,"length1":88,"length2":84},{"diffs":[[0,"   var n"],[-1," = "],[1,";\n        if ("],[0,"data.cou"]],"start1":605,"start2":605,"length1":19,"length2":30},{"diffs":[[0,"ount"],[-1,"er"],[0," < 2"],[-1," ? data.counter :"],[1,")\n            n = data.count;\n        else\n            n ="],[0," data."],[-1,"res"],[1,"cache"],[0,"[0] "]],"start1":633,"start2":633,"length1":40,"length2":81},{"diffs":[[0,"ata."],[-1,"res"],[1,"cache"],[0,"[1];\n"],[1,"\n"],[0,"        "],[-1,"    res"],[1,"data.cache"],[0,".pus"]],"start1":717,"start2":717,"length1":31,"length2":37},{"diffs":[[0,"    "],[-1,"    if (res.length > 2)\n                res.shift();\n"],[1,"data.cache = data.cache.slice(-2); // We only cache last 2 values"],[0,"\n   "]],"start1":764,"start2":764,"length1":61,"length2":73},{"diffs":[[0,"ues\n        "],[-1,"    "],[0,"data.counter"]],"start1":830,"start2":830,"length1":28,"length2":24},{"diffs":[[0,"ount"],[-1,"er"],[0,"++;\n"],[1,"\n"],[0,"        "],[-1,"    "],[0,"retu"]],"start1":848,"start2":848,"length1":26,"length2":21},{"diffs":[[0,"    "],[-1,"    "],[0,"},\n\n"],[-1,"    "],[0,"    "]],"start1":875,"start2":875,"length1":20,"length2":12},{"diffs":[[0,"ty; },\n\n"],[-1,"    "],[0,"    func"]],"start1":919,"start2":919,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    "],[0,"var "],[1,"_"],[0,"clone = "]],"start1":950,"start2":950,"length1":24,"length2":21},{"diffs":[[0,"    "],[-1,"    "],[1,"_"],[0,"clone."],[-1,"_"],[1,"data."],[0,"count"],[-1,"er"],[0," = this."],[-1,"_counter;\n   "],[1,"data.count;\n"],[0,"        "],[-1," "],[1,"_"],[0,"clone."],[-1,"_results"],[1,"data.cache"],[0," = ["]],"start1":983,"start2":983,"length1":70,"length2":70},{"diffs":[[0,"= [this."],[-1,"_results"],[1,"cache"],[0,"[0], thi"]],"start1":1050,"start2":1050,"length1":24,"length2":21},{"diffs":[[0,"his."],[-1,"_results"],[1,"cache"],[0,"[1]];\n"],[-1,"    "],[0,"    "]],"start1":1069,"start2":1069,"length1":26,"length2":19},{"diffs":[[0,"    "],[-1,"    }\n    );\n\n    "],[1,"}\n);\n\n\n"],[0,"for "]],"start1":1106,"start2":1106,"length1":26,"length2":15},{"diffs":[[0,"< 30"],[-1,"1"],[1,"0"],[0,"; i++)\n"],[-1,"    "],[0,"    "]],"start1":1135,"start2":1135,"length1":20,"length2":16},{"diffs":[[0,"et()"],[-1,".valueOf());"],[1,");\n```"],[0,"\n\nOn"]],"start1":1169,"start2":1169,"length1":20,"length2":14}]],"length":1797,"saved":false}
{"ts":1354106941056,"patch":[[{"diffs":[[0,"ld look "],[-1,"like "],[0,"a bit li"]],"start1":397,"start2":397,"length1":21,"length2":16},{"diffs":[[0,"f items,"],[-1," "],[1,"\n"],[0,"as long "]],"start1":1253,"start2":1253,"length1":17,"length2":17},{"diffs":[[0,"ed. "],[-1,"For example, we can have an enumeration on the Fibonacci sequence quite easily:\n\n\n\nBut read on, there's a bit more :)\n\nM"],[1,"Obviously, the Fibonacci\nenumeration above is an example of this, and that's why the `count` method returns\ninfinity.\n\nEnumerations can only go forward. Taht means that m"],[0,"ost "]],"start1":1313,"start2":1313,"length1":128,"length2":178},{"diffs":[[0,"meration"],[-1," "],[1,"\n"],[0,"consume "]],"start1":1512,"start2":1512,"length1":17,"length2":17},{"diffs":[[0,"em ("],[-1,"for example, finding an item in a list will consume all the items up to that item).\n"],[1,"that is, advance the cursor). "],[0,"Enum"]],"start1":1543,"start2":1543,"length1":92,"length2":38},{"diffs":[[0,"entirely"],[-1," "],[1,"\n"],[0,"function"]],"start1":1594,"start2":1594,"length1":17,"length2":17},{"diffs":[[0,"l object"],[1,", while trying to be as efficient\nas possible"],[0,".\n\nEnum."]],"start1":1643,"start2":1643,"length1":16,"length2":61}]],"length":1833,"saved":false}
